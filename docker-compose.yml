version: "3.8"
services:
  pgdb:
    image: postgres
    container_name: pgdb
    env_file:
      - variables-auth.env
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
    networks:
      - auth_db_network
      - auth_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres-auth -d auth-db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s


  pgadmin4-container:
    depends_on:
      - pgdb
    image: dpage/pgadmin4
    container_name: pgadmin4-container
    env_file:
      - variables-auth.env
    restart: always
    ports:
      - "8888:80"
    volumes:
      - pgadmin-info:/var/lib/pgadmin
    networks:
      - auth_db_network
    # command: -p 8888

  authserver:
    depends_on:
      pgdb:
        condition: service_healthy
    image: auth-app:latest
    container_name: auth-app
    restart: always
    env_file:
      - variables-auth.env
    # ports:
    #   - "9000:9000"
    networks:
      - auth_network

  pgdbio:
    image: postgres
    container_name: pgdbio
    env_file:
      - variables-io.env
    restart: always
    ports:
      - "5001:5001"
    volumes:
      - postgres-db-io:/var/lib/postgresql/data
    networks:
      - io_db_network
      - io_network
    command: -p 5001
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p 5001 -U postgres-io -d main-db" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 15s

  pgadmin4-container-io: 
    depends_on:
      - pgdbio
    image: dpage/pgadmin4
    container_name: pgadmin4-container-io
    env_file:
      - variables-io.env
    restart: always
    ports:
      - "8999:80"
    volumes:
      - pgadmin-info-io:/var/lib/pgadmin
    networks:
      - io_db_network
    # command: -p 8999

  ioserver: 
    depends_on:
      pgdbio:
        condition: service_healthy
    image: io-app:latest
    container_name: io-app
    restart: always
    env_file:
      - variables-io.env
    # ports:
    #   - "9002:9002"
    networks:
      - io_network

  businessserver:
    image: business-app:latest
    depends_on:
      - ioserver
      - authserver
    container_name: business-app
    restart: always
    # ports:
    #   - "9001:9001"
    networks:
      - auth_network
      - io_network

  kong:
    image: kong:latest
    container_name: kong_gateway
    depends_on:
      - authserver
      - businessserver
    volumes:
      - ./kong:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "80:8000"
      - "443:8443"
    networks:
      - auth_db_network
      - auth_network
      - io_db_network
      - io_network

volumes:
  postgres-db:
    name: auth-server_postgres-db
    external: true
  pgadmin-info:
    name: auth-server_pgadmin-info
    external: true
  postgres-db-io:
    name: io-service_postgres-db-io
    external: true
  pgadmin-info-io:
    name: io-service_pgadmin-info-io
    external: true
  kong:
    name: kong

networks:
  auth_db_network:
  auth_network:
  io_db_network:
  io_network:
